#!/bin/sh
# https://www.linode.com/docs/guides/securing-nginx-with-modsecurity/
# there are errors by author at later part, most of it were modified by me already.
# he implement  OWASP ModSecurity Core Rule Set (CRS) https://github.com/coreruleset/coreruleset
# note this installation take quite some time

apt-get update


apt-get install -y bison build-essential ca-certificates curl dh-autoreconf doxygen flex gawk git iputils-ping libcurl4-gnutls-dev libexpat1-dev libgeoip-dev liblmdb-dev libpcre3-dev libpcre++-dev libssl-dev libtool libxml2 libxml2-dev libyajl-dev locales lua5.3-dev pkg-config wget zlib1g-dev zlibc libxslt-dev libgd-dev

cd /opt &&  git clone https://github.com/SpiderLabs/ModSecurity
cd ModSecurity

git submodule init
git submodule update

./build.sh

./configure

make

make install

cd /opt &&  git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git

apt-get install -y nginx-core=1.14.0-0ubuntu1.10

cd /opt &&  wget http://nginx.org/download/nginx-1.14.0.tar.gz

tar -xvzmf nginx-1.14.0.tar.gz

cd nginx-1.14.0

./configure --add-dynamic-module=../ModSecurity-nginx --with-cc-opt='-g -O2 -fdebug-prefix-map=/build/nginx-KgqPmI/nginx-1.14.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_geoip_module=dynamic --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_xslt_module=dynamic --with-stream=dynamic --with-stream_ssl_module --with-mail=dynamic --with-mail_ssl_module

make modules

mkdir /etc/nginx/modules

cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules

#cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
sed '5 i load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;' /etc/nginx/nginx.conf | tee /etc/nginx/nginx.conf 

rm -rf /usr/share/modsecurity-crs

git clone https://github.com/coreruleset/coreruleset /usr/local/modsecurity-crs

mv /usr/local/modsecurity-crs/crs-setup.conf.example /usr/local/modsecurity-crs/crs-setup.conf

mv /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf.example /usr/local/modsecurity-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf

mkdir -p /etc/nginx/modsec

cp /opt/ModSecurity/unicode.mapping /etc/nginx/modsec/
cp /opt/ModSecurity/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf

sed -i 's/SecRuleEngine DetectionOnly/SecRuleEngine On/g' /etc/nginx/modsec/modsecurity.conf

echo "Include /etc/nginx/modsec/modsecurity.conf" > /etc/nginx/modsec/main.conf
echo "Include /usr/local/modsecurity-crs/crs-setup.conf" >> /etc/nginx/modsec/main.conf
echo "Include /usr/local/modsecurity-crs/rules/*.conf" >> /etc/nginx/modsec/main.conf

#cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
cp /tmp/default /etc/nginx/sites-available/default

systemctl restart nginx.service

touch ~/ready

ufw allow 80
ufw allow 22
ufw enable


